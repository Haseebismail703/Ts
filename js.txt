javaScript (JS) ek high-level, dynamic programming language hai jo 
web development mein sabse zyada use hoti hai. 
Yeh language web browsers mein run hoti


var
Scope: Function-scope hota hai, yani agar var kisi function ke andar declare kiya gaya hai to woh sirf us
function ke andar accessible hoga. 
Agar block (e.g., if ya for loop) 
ke andar use kiya gaya hai, to wo block ke bahar bhi accessible hota hai.

function 

specific task ya action perform karta hai
Arrow functions allow us to write shorter function syntax:

js event 

onclick
onchange
onload
onkeydown
onmouseout
onmouseover

scope 
{
  let x = 2;
}
// x can NOT be used here

JavaScript Classes are templates for JavaScript Objects.


JavaScript mein promises asynchronous operations ko handle karne ka ek tarika hoti hain.
Yeh ek object hota hai jo future mein kisi value ko represent karta hai
Promise ke Teen States:
Pending:  initial state hai jab promise create hota hai aur abhi tak resolve ya reject nahi hota.
Fulfilled: Jab promise successfully complete hota hai aur result milta hai.
Rejected: Jab promise fail ho jata hai aur error aata hai.


sync mai code line by line execute hota hai yani ak sath code chalta hai 
kuch task asa hota hai jis mai time lagta hai waha per  async use karta hai 

async function JavaScript mein ek special type ka function hota hai jo asynchronous code ko handle karne ke liye use hota hai.

async/await kaha use hota hai 
jo function promise return karta hai waha use hota hai 


Promise.all() JavaScript ka ek built-in method hai jo

ek array me diye gaye saare promises ko ek saath execute karta hai. 

Ye tabhi resolve hota hai jab array me diye gaye saare promises successfully resolve ho jaate hain, aur agar koi ek bhi promise reject ho, to ye reject ho jaata hai.

Closure ek aisa function hota hai jo apne surrounding scope ke variables ko "yaad" rakhta hai


Callback function ek aisi function hoti hai jo dusre function ke argument ke taur par pass hota hai aur baad me usko call kiya jata hai. Ye ek higher-order function ke concept par based hai, jisme ek function doosre function ko call karta hai.


setTimeout kuch time ka bad code ko execute karta hai 
setInterval after a time bar bar code ko run kara ga  




string method 

length check karta hai 
toLowerCase()  sab ko small kar data hai 
toUpperCase() sab ko bara kardata hai  
trim() String ke start aur end ke whitespace remove karta hai.
 // includes("hello") check karta hai ka string varibale mai hai ya nhi aur boleaen return karta hai 
hello world  indexOf('hello world')  // 6  index check  karta hai
hello world startsWith("hello") check karta hai ka hello sa shro hoota hai ya nhi return bolean karta hai 
hello world endWith("world") check karta hai ka hello sa shro hoota hai ya nhi return bolean karta hai 
hello world substring(6) string ko copy karta hai   
replace("hello world" , "hello pakistan") replace karta hai 
split(",") string ko divide karka array bnata hai 
charAt(2) string ka index btao character bta dega 
concat()  Strings ko join karta hai.
example 
const str1 = "Hello";
const str2 = "World";
console.log(str1.concat(" ", str2)); // "Hello World"

repeat() string ko repeate karta hai 
const str = "Hi ";
console.log(str.repeat(3)); // "Hi Hi Hi"

toString() number ko string mai convert karta hai  




Number type 

toFixed()
Number ko fixed decimal places ke saath round karta hai. agar 12.2567 hoga to toFixed(2)  12.56 
round kardag 
toPrecision()
ya start sa number ko fixed karta hai 


valueof() kisi bhi value maloom karta koi bhi hon varibale object array ya phir string

parsInt() 
without decimal value return karta hai yani agr var mai "12.234" hoga to 12 return kara ga 
parsFloat() 
ya pori value return kart ahi

isFinite()
ya check karta hai ka number hai ya nhi chaya wo string ho ya number mai hon to ya true return kara ga 
isInteger()
Check karta hai ki number integer hai ya nahi.

tolocalstring()
ya number mai coma laga deta hai 12323 => 12,23,234 is tarah 

Math.round aga lajaiga 0.5 ko 1 kardaga
math.ceil aga lagaiga 2.2 ko 3 kara ga 
math.floor picha lajaiga  1.9 ko 1 kara ga 
Math.abs() negative ko positve mai convert kara ga 
Math.random() random value genrate kara ga 




loop 
for in loop  => object ko print karna ka lya use hota hai 



Addeventlistner ak listner hai jo html per event lagana ka kaam ata hai => click, mouseover, keydown, etc.
html mai class add karna ka lya class list ka use karta hai classlist.add() jitni marzi classes add karo priority last class ko milti hai


// traversal => ka matlab kisi bhi element ka child ko ya parent ko target karna ka lya ya method use hota hai  
parentElement => child ka parent ko target karna ka lya use hota hai agar koi parent nhi to null return karta hai 
parentNode => same hai lkn parent nhi hoga to #document return kara ga  
chldren[1] index daker bhi accces kar sakta hai  => children ko target karna ka lya use hota hai 
childNode[1] => children ko btata hai agar comment hoga to comment bhi btai ga aur space ko text btaiga 
firstChild lastChild child ko acces kara ga 



createElement => teg create kara ga 
createText => teg ka ander ka text create kara gay
createComment => comment create kara ga 
append child => jo js mai teg craete kya hai aur text create kya hai usa merge karta hai aur ya lst mai ayega aur agar first mai dekhana hai insertbefore ka use kara ga 

let a = document.createElement("h1")

let para = document.createTextNode("This is paragraph")

a.append(para)

var b = document.getElementById("teg")
b.insertBefore(a,b.childNodes[0])

hasatribute() check kara ga ka attribute hai ya nhi agr hoga to true return kara ga nhi to false 
hasachildNode() check kara ga ka parent ka child  hai ya nhi agr hoga to true return kara ga  nhi to false



element.setAttribute("id", "newId"); // Add ID
element.removeAttribute("id");      // Remove ID
element.classList.add('new-class'); // Add class
element.classList.remove('old-class'); // Remove class
classlist.toggle() add aur remove karta hai 







// event loop

event loop js ka ak system hai jo asyn operation ko handle karta hai ya multiple task ko perform karta hai 

js single threded language hai jo one by one code ko execute karta hai
 yani sync operation ko perform karta hai lkn kuch task asa hota hai jo time lata hai 


Sabse pehle synchronous code run hota hai (jo line by line call stack mein aata hai).

Jab code mein fetch ya setTimeout jaise asynchronous functions aate hain, to wo Web APIs ko handle karne ke liye de diye jate hain.

Web APIs apna kaam background mein karte hain (jaise timer chalana, network request bhejna).

Jab ye asynchronous kaam complete ho jata hai, tab uska callback callback queue mein chala jata hai.

Event loop continuously check karta hai ki call stack khaali hai ya nahi.

Jab call stack khaali hota hai, tab event loop callback queue se callback uthata hai aur call stack mein daal deta hai taake wo execute ho jaye.
